// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: auth.sql

package sqlc

import (
	"context"
	"time"
)

const getUserStatus = `-- name: GetUserStatus :one
SELECT CASE
WHEN EXISTS(
    SELECT 1
    FROM users
    WHERE users.email = $1
      AND deleted_at IS NULL FOR UPDATE
    ) THEN 'active'
    WHEN EXISTS(
    SELECT 1
    FROM users
    WHERE users.email = $1
      AND deleted_at IS NOT NULL FOR UPDATE
    ) THEN 'soft_deleted'
ELSE 'not_found' END AS status
`

func (q *Queries) GetUserStatus(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRow(ctx, getUserStatus, email)
	var status string
	err := row.Scan(&status)
	return status, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (id, email, password_hash, app_id,updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type InsertUserParams struct {
	ID           string    `db:"id"`
	Email        string    `db:"email"`
	PasswordHash string    `db:"password_hash"`
	AppID        int32     `db:"app_id"`
	UpdatedAt    time.Time `db:"updated_at"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.AppID,
		arg.UpdatedAt,
	)
	return err
}

const setDeletedUserAtNull = `-- name: SetDeletedUserAtNull :exec
UPDATE users
SET deleted_at = NULL
WHERE email = $1
`

func (q *Queries) SetDeletedUserAtNull(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, setDeletedUserAtNull, email)
	return err
}
