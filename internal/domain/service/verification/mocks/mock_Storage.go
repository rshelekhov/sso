// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/sso/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// DeleteAllTokens provides a mock function with given fields: ctx, clientID, userID
func (_m *Storage) DeleteAllTokens(ctx context.Context, clientID string, userID string) error {
	ret := _m.Called(ctx, clientID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, clientID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_DeleteAllTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllTokens'
type Storage_DeleteAllTokens_Call struct {
	*mock.Call
}

// DeleteAllTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
//   - userID string
func (_e *Storage_Expecter) DeleteAllTokens(ctx interface{}, clientID interface{}, userID interface{}) *Storage_DeleteAllTokens_Call {
	return &Storage_DeleteAllTokens_Call{Call: _e.mock.On("DeleteAllTokens", ctx, clientID, userID)}
}

func (_c *Storage_DeleteAllTokens_Call) Run(run func(ctx context.Context, clientID string, userID string)) *Storage_DeleteAllTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_DeleteAllTokens_Call) Return(_a0 error) *Storage_DeleteAllTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_DeleteAllTokens_Call) RunAndReturn(run func(context.Context, string, string) error) *Storage_DeleteAllTokens_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVerificationToken provides a mock function with given fields: ctx, token
func (_m *Storage) DeleteVerificationToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerificationToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_DeleteVerificationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVerificationToken'
type Storage_DeleteVerificationToken_Call struct {
	*mock.Call
}

// DeleteVerificationToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *Storage_Expecter) DeleteVerificationToken(ctx interface{}, token interface{}) *Storage_DeleteVerificationToken_Call {
	return &Storage_DeleteVerificationToken_Call{Call: _e.mock.On("DeleteVerificationToken", ctx, token)}
}

func (_c *Storage_DeleteVerificationToken_Call) Run(run func(ctx context.Context, token string)) *Storage_DeleteVerificationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_DeleteVerificationToken_Call) Return(_a0 error) *Storage_DeleteVerificationToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_DeleteVerificationToken_Call) RunAndReturn(run func(context.Context, string) error) *Storage_DeleteVerificationToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerificationTokenData provides a mock function with given fields: ctx, token
func (_m *Storage) GetVerificationTokenData(ctx context.Context, token string) (entity.VerificationToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetVerificationTokenData")
	}

	var r0 entity.VerificationToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.VerificationToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.VerificationToken); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(entity.VerificationToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetVerificationTokenData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerificationTokenData'
type Storage_GetVerificationTokenData_Call struct {
	*mock.Call
}

// GetVerificationTokenData is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *Storage_Expecter) GetVerificationTokenData(ctx interface{}, token interface{}) *Storage_GetVerificationTokenData_Call {
	return &Storage_GetVerificationTokenData_Call{Call: _e.mock.On("GetVerificationTokenData", ctx, token)}
}

func (_c *Storage_GetVerificationTokenData_Call) Run(run func(ctx context.Context, token string)) *Storage_GetVerificationTokenData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetVerificationTokenData_Call) Return(_a0 entity.VerificationToken, _a1 error) *Storage_GetVerificationTokenData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetVerificationTokenData_Call) RunAndReturn(run func(context.Context, string) (entity.VerificationToken, error)) *Storage_GetVerificationTokenData_Call {
	_c.Call.Return(run)
	return _c
}

// SaveVerificationToken provides a mock function with given fields: ctx, data
func (_m *Storage) SaveVerificationToken(ctx context.Context, data entity.VerificationToken) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SaveVerificationToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.VerificationToken) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_SaveVerificationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveVerificationToken'
type Storage_SaveVerificationToken_Call struct {
	*mock.Call
}

// SaveVerificationToken is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.VerificationToken
func (_e *Storage_Expecter) SaveVerificationToken(ctx interface{}, data interface{}) *Storage_SaveVerificationToken_Call {
	return &Storage_SaveVerificationToken_Call{Call: _e.mock.On("SaveVerificationToken", ctx, data)}
}

func (_c *Storage_SaveVerificationToken_Call) Run(run func(ctx context.Context, data entity.VerificationToken)) *Storage_SaveVerificationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.VerificationToken))
	})
	return _c
}

func (_c *Storage_SaveVerificationToken_Call) Return(_a0 error) *Storage_SaveVerificationToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_SaveVerificationToken_Call) RunAndReturn(run func(context.Context, entity.VerificationToken) error) *Storage_SaveVerificationToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
