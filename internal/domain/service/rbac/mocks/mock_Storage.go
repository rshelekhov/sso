// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// GetUserRole provides a mock function with given fields: ctx, appID, userID
func (_m *Storage) GetUserRole(ctx context.Context, appID string, userID string) (string, error) {
	ret := _m.Called(ctx, appID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRole")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, appID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, appID, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRole'
type Storage_GetUserRole_Call struct {
	*mock.Call
}

// GetUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
//   - userID string
func (_e *Storage_Expecter) GetUserRole(ctx interface{}, appID interface{}, userID interface{}) *Storage_GetUserRole_Call {
	return &Storage_GetUserRole_Call{Call: _e.mock.On("GetUserRole", ctx, appID, userID)}
}

func (_c *Storage_GetUserRole_Call) Run(run func(ctx context.Context, appID string, userID string)) *Storage_GetUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_GetUserRole_Call) Return(_a0 string, _a1 error) *Storage_GetUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUserRole_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *Storage_GetUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserRole provides a mock function with given fields: ctx, appID, userID, role
func (_m *Storage) SetUserRole(ctx context.Context, appID string, userID string, role string) error {
	ret := _m.Called(ctx, appID, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for SetUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, appID, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_SetUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserRole'
type Storage_SetUserRole_Call struct {
	*mock.Call
}

// SetUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
//   - userID string
//   - role string
func (_e *Storage_Expecter) SetUserRole(ctx interface{}, appID interface{}, userID interface{}, role interface{}) *Storage_SetUserRole_Call {
	return &Storage_SetUserRole_Call{Call: _e.mock.On("SetUserRole", ctx, appID, userID, role)}
}

func (_c *Storage_SetUserRole_Call) Run(run func(ctx context.Context, appID string, userID string, role string)) *Storage_SetUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Storage_SetUserRole_Call) Return(_a0 error) *Storage_SetUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_SetUserRole_Call) RunAndReturn(run func(context.Context, string, string, string) error) *Storage_SetUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
