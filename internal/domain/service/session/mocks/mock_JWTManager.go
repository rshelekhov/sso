// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JWTManager is an autogenerated mock type for the JWTManager type
type JWTManager struct {
	mock.Mock
}

type JWTManager_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTManager) EXPECT() *JWTManager_Expecter {
	return &JWTManager_Expecter{mock: &_m.Mock}
}

// AccessTokenTTL provides a mock function with no fields
func (_m *JWTManager) AccessTokenTTL() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AccessTokenTTL")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JWTManager_AccessTokenTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessTokenTTL'
type JWTManager_AccessTokenTTL_Call struct {
	*mock.Call
}

// AccessTokenTTL is a helper method to define mock.On call
func (_e *JWTManager_Expecter) AccessTokenTTL() *JWTManager_AccessTokenTTL_Call {
	return &JWTManager_AccessTokenTTL_Call{Call: _e.mock.On("AccessTokenTTL")}
}

func (_c *JWTManager_AccessTokenTTL_Call) Run(run func()) *JWTManager_AccessTokenTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTManager_AccessTokenTTL_Call) Return(_a0 time.Duration) *JWTManager_AccessTokenTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTManager_AccessTokenTTL_Call) RunAndReturn(run func() time.Duration) *JWTManager_AccessTokenTTL_Call {
	_c.Call.Return(run)
	return _c
}

// Issuer provides a mock function with no fields
func (_m *JWTManager) Issuer() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Issuer")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// JWTManager_Issuer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Issuer'
type JWTManager_Issuer_Call struct {
	*mock.Call
}

// Issuer is a helper method to define mock.On call
func (_e *JWTManager_Expecter) Issuer() *JWTManager_Issuer_Call {
	return &JWTManager_Issuer_Call{Call: _e.mock.On("Issuer")}
}

func (_c *JWTManager_Issuer_Call) Run(run func()) *JWTManager_Issuer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTManager_Issuer_Call) Return(_a0 string) *JWTManager_Issuer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTManager_Issuer_Call) RunAndReturn(run func() string) *JWTManager_Issuer_Call {
	_c.Call.Return(run)
	return _c
}

// Kid provides a mock function with given fields: appID
func (_m *JWTManager) Kid(appID string) (string, error) {
	ret := _m.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for Kid")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(appID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(appID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTManager_Kid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kid'
type JWTManager_Kid_Call struct {
	*mock.Call
}

// Kid is a helper method to define mock.On call
//   - appID string
func (_e *JWTManager_Expecter) Kid(appID interface{}) *JWTManager_Kid_Call {
	return &JWTManager_Kid_Call{Call: _e.mock.On("Kid", appID)}
}

func (_c *JWTManager_Kid_Call) Run(run func(appID string)) *JWTManager_Kid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JWTManager_Kid_Call) Return(_a0 string, _a1 error) *JWTManager_Kid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTManager_Kid_Call) RunAndReturn(run func(string) (string, error)) *JWTManager_Kid_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessToken provides a mock function with given fields: appID, kid, additionalClaims
func (_m *JWTManager) NewAccessToken(appID string, kid string, additionalClaims map[string]interface{}) (string, error) {
	ret := _m.Called(appID, kid, additionalClaims)

	if len(ret) == 0 {
		panic("no return value specified for NewAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) (string, error)); ok {
		return rf(appID, kid, additionalClaims)
	}
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) string); ok {
		r0 = rf(appID, kid, additionalClaims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, map[string]interface{}) error); ok {
		r1 = rf(appID, kid, additionalClaims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTManager_NewAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAccessToken'
type JWTManager_NewAccessToken_Call struct {
	*mock.Call
}

// NewAccessToken is a helper method to define mock.On call
//   - appID string
//   - kid string
//   - additionalClaims map[string]interface{}
func (_e *JWTManager_Expecter) NewAccessToken(appID interface{}, kid interface{}, additionalClaims interface{}) *JWTManager_NewAccessToken_Call {
	return &JWTManager_NewAccessToken_Call{Call: _e.mock.On("NewAccessToken", appID, kid, additionalClaims)}
}

func (_c *JWTManager_NewAccessToken_Call) Run(run func(appID string, kid string, additionalClaims map[string]interface{})) *JWTManager_NewAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *JWTManager_NewAccessToken_Call) Return(_a0 string, _a1 error) *JWTManager_NewAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTManager_NewAccessToken_Call) RunAndReturn(run func(string, string, map[string]interface{}) (string, error)) *JWTManager_NewAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefreshToken provides a mock function with no fields
func (_m *JWTManager) NewRefreshToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewRefreshToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// JWTManager_NewRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRefreshToken'
type JWTManager_NewRefreshToken_Call struct {
	*mock.Call
}

// NewRefreshToken is a helper method to define mock.On call
func (_e *JWTManager_Expecter) NewRefreshToken() *JWTManager_NewRefreshToken_Call {
	return &JWTManager_NewRefreshToken_Call{Call: _e.mock.On("NewRefreshToken")}
}

func (_c *JWTManager_NewRefreshToken_Call) Run(run func()) *JWTManager_NewRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTManager_NewRefreshToken_Call) Return(_a0 string) *JWTManager_NewRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTManager_NewRefreshToken_Call) RunAndReturn(run func() string) *JWTManager_NewRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshTokenCookieDomain provides a mock function with no fields
func (_m *JWTManager) RefreshTokenCookieDomain() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokenCookieDomain")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// JWTManager_RefreshTokenCookieDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshTokenCookieDomain'
type JWTManager_RefreshTokenCookieDomain_Call struct {
	*mock.Call
}

// RefreshTokenCookieDomain is a helper method to define mock.On call
func (_e *JWTManager_Expecter) RefreshTokenCookieDomain() *JWTManager_RefreshTokenCookieDomain_Call {
	return &JWTManager_RefreshTokenCookieDomain_Call{Call: _e.mock.On("RefreshTokenCookieDomain")}
}

func (_c *JWTManager_RefreshTokenCookieDomain_Call) Run(run func()) *JWTManager_RefreshTokenCookieDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTManager_RefreshTokenCookieDomain_Call) Return(_a0 string) *JWTManager_RefreshTokenCookieDomain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTManager_RefreshTokenCookieDomain_Call) RunAndReturn(run func() string) *JWTManager_RefreshTokenCookieDomain_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshTokenCookiePath provides a mock function with no fields
func (_m *JWTManager) RefreshTokenCookiePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokenCookiePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// JWTManager_RefreshTokenCookiePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshTokenCookiePath'
type JWTManager_RefreshTokenCookiePath_Call struct {
	*mock.Call
}

// RefreshTokenCookiePath is a helper method to define mock.On call
func (_e *JWTManager_Expecter) RefreshTokenCookiePath() *JWTManager_RefreshTokenCookiePath_Call {
	return &JWTManager_RefreshTokenCookiePath_Call{Call: _e.mock.On("RefreshTokenCookiePath")}
}

func (_c *JWTManager_RefreshTokenCookiePath_Call) Run(run func()) *JWTManager_RefreshTokenCookiePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTManager_RefreshTokenCookiePath_Call) Return(_a0 string) *JWTManager_RefreshTokenCookiePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTManager_RefreshTokenCookiePath_Call) RunAndReturn(run func() string) *JWTManager_RefreshTokenCookiePath_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshTokenTTL provides a mock function with no fields
func (_m *JWTManager) RefreshTokenTTL() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokenTTL")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// JWTManager_RefreshTokenTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshTokenTTL'
type JWTManager_RefreshTokenTTL_Call struct {
	*mock.Call
}

// RefreshTokenTTL is a helper method to define mock.On call
func (_e *JWTManager_Expecter) RefreshTokenTTL() *JWTManager_RefreshTokenTTL_Call {
	return &JWTManager_RefreshTokenTTL_Call{Call: _e.mock.On("RefreshTokenTTL")}
}

func (_c *JWTManager_RefreshTokenTTL_Call) Run(run func()) *JWTManager_RefreshTokenTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTManager_RefreshTokenTTL_Call) Return(_a0 time.Duration) *JWTManager_RefreshTokenTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTManager_RefreshTokenTTL_Call) RunAndReturn(run func() time.Duration) *JWTManager_RefreshTokenTTL_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTManager creates a new instance of JWTManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTManager {
	mock := &JWTManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
