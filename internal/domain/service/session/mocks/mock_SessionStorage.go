// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/sso/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// SessionStorage is an autogenerated mock type for the SessionStorage type
type SessionStorage struct {
	mock.Mock
}

type SessionStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionStorage) EXPECT() *SessionStorage_Expecter {
	return &SessionStorage_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, _a1
func (_m *SessionStorage) CreateSession(ctx context.Context, _a1 entity.Session) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Session) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionStorage_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionStorage_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 entity.Session
func (_e *SessionStorage_Expecter) CreateSession(ctx interface{}, _a1 interface{}) *SessionStorage_CreateSession_Call {
	return &SessionStorage_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, _a1)}
}

func (_c *SessionStorage_CreateSession_Call) Run(run func(ctx context.Context, _a1 entity.Session)) *SessionStorage_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Session))
	})
	return _c
}

func (_c *SessionStorage_CreateSession_Call) Return(_a0 error) *SessionStorage_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_CreateSession_Call) RunAndReturn(run func(context.Context, entity.Session) error) *SessionStorage_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllSessions provides a mock function with given fields: ctx, userID, appID
func (_m *SessionStorage) DeleteAllSessions(ctx context.Context, userID string, appID string) error {
	ret := _m.Called(ctx, userID, appID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionStorage_DeleteAllSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllSessions'
type SessionStorage_DeleteAllSessions_Call struct {
	*mock.Call
}

// DeleteAllSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - appID string
func (_e *SessionStorage_Expecter) DeleteAllSessions(ctx interface{}, userID interface{}, appID interface{}) *SessionStorage_DeleteAllSessions_Call {
	return &SessionStorage_DeleteAllSessions_Call{Call: _e.mock.On("DeleteAllSessions", ctx, userID, appID)}
}

func (_c *SessionStorage_DeleteAllSessions_Call) Run(run func(ctx context.Context, userID string, appID string)) *SessionStorage_DeleteAllSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SessionStorage_DeleteAllSessions_Call) Return(_a0 error) *SessionStorage_DeleteAllSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_DeleteAllSessions_Call) RunAndReturn(run func(context.Context, string, string) error) *SessionStorage_DeleteAllSessions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllUserDevices provides a mock function with given fields: ctx, userID, appID
func (_m *SessionStorage) DeleteAllUserDevices(ctx context.Context, userID string, appID string) error {
	ret := _m.Called(ctx, userID, appID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllUserDevices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionStorage_DeleteAllUserDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllUserDevices'
type SessionStorage_DeleteAllUserDevices_Call struct {
	*mock.Call
}

// DeleteAllUserDevices is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - appID string
func (_e *SessionStorage_Expecter) DeleteAllUserDevices(ctx interface{}, userID interface{}, appID interface{}) *SessionStorage_DeleteAllUserDevices_Call {
	return &SessionStorage_DeleteAllUserDevices_Call{Call: _e.mock.On("DeleteAllUserDevices", ctx, userID, appID)}
}

func (_c *SessionStorage_DeleteAllUserDevices_Call) Run(run func(ctx context.Context, userID string, appID string)) *SessionStorage_DeleteAllUserDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SessionStorage_DeleteAllUserDevices_Call) Return(_a0 error) *SessionStorage_DeleteAllUserDevices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_DeleteAllUserDevices_Call) RunAndReturn(run func(context.Context, string, string) error) *SessionStorage_DeleteAllUserDevices_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *SessionStorage) DeleteRefreshToken(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionStorage_DeleteRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefreshToken'
type SessionStorage_DeleteRefreshToken_Call struct {
	*mock.Call
}

// DeleteRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *SessionStorage_Expecter) DeleteRefreshToken(ctx interface{}, refreshToken interface{}) *SessionStorage_DeleteRefreshToken_Call {
	return &SessionStorage_DeleteRefreshToken_Call{Call: _e.mock.On("DeleteRefreshToken", ctx, refreshToken)}
}

func (_c *SessionStorage_DeleteRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *SessionStorage_DeleteRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionStorage_DeleteRefreshToken_Call) Return(_a0 error) *SessionStorage_DeleteRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_DeleteRefreshToken_Call) RunAndReturn(run func(context.Context, string) error) *SessionStorage_DeleteRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, _a1
func (_m *SessionStorage) DeleteSession(ctx context.Context, _a1 entity.Session) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Session) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionStorage_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type SessionStorage_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 entity.Session
func (_e *SessionStorage_Expecter) DeleteSession(ctx interface{}, _a1 interface{}) *SessionStorage_DeleteSession_Call {
	return &SessionStorage_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, _a1)}
}

func (_c *SessionStorage_DeleteSession_Call) Run(run func(ctx context.Context, _a1 entity.Session)) *SessionStorage_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Session))
	})
	return _c
}

func (_c *SessionStorage_DeleteSession_Call) Return(_a0 error) *SessionStorage_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_DeleteSession_Call) RunAndReturn(run func(context.Context, entity.Session) error) *SessionStorage_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *SessionStorage) GetSessionByRefreshToken(ctx context.Context, refreshToken string) (entity.Session, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByRefreshToken")
	}

	var r0 entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Session, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Session); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(entity.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionStorage_GetSessionByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByRefreshToken'
type SessionStorage_GetSessionByRefreshToken_Call struct {
	*mock.Call
}

// GetSessionByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *SessionStorage_Expecter) GetSessionByRefreshToken(ctx interface{}, refreshToken interface{}) *SessionStorage_GetSessionByRefreshToken_Call {
	return &SessionStorage_GetSessionByRefreshToken_Call{Call: _e.mock.On("GetSessionByRefreshToken", ctx, refreshToken)}
}

func (_c *SessionStorage_GetSessionByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *SessionStorage_GetSessionByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionStorage_GetSessionByRefreshToken_Call) Return(_a0 entity.Session, _a1 error) *SessionStorage_GetSessionByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionStorage_GetSessionByRefreshToken_Call) RunAndReturn(run func(context.Context, string) (entity.Session, error)) *SessionStorage_GetSessionByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionStorage creates a new instance of SessionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionStorage {
	mock := &SessionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
