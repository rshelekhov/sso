// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/sso/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// DeviceStorage is an autogenerated mock type for the DeviceStorage type
type DeviceStorage struct {
	mock.Mock
}

type DeviceStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *DeviceStorage) EXPECT() *DeviceStorage_Expecter {
	return &DeviceStorage_Expecter{mock: &_m.Mock}
}

// DeleteAllUserDevices provides a mock function with given fields: ctx, userID
func (_m *DeviceStorage) DeleteAllUserDevices(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllUserDevices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceStorage_DeleteAllUserDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllUserDevices'
type DeviceStorage_DeleteAllUserDevices_Call struct {
	*mock.Call
}

// DeleteAllUserDevices is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *DeviceStorage_Expecter) DeleteAllUserDevices(ctx interface{}, userID interface{}) *DeviceStorage_DeleteAllUserDevices_Call {
	return &DeviceStorage_DeleteAllUserDevices_Call{Call: _e.mock.On("DeleteAllUserDevices", ctx, userID)}
}

func (_c *DeviceStorage_DeleteAllUserDevices_Call) Run(run func(ctx context.Context, userID string)) *DeviceStorage_DeleteAllUserDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DeviceStorage_DeleteAllUserDevices_Call) Return(_a0 error) *DeviceStorage_DeleteAllUserDevices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceStorage_DeleteAllUserDevices_Call) RunAndReturn(run func(context.Context, string) error) *DeviceStorage_DeleteAllUserDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDeviceID provides a mock function with given fields: ctx, userID, userAgent
func (_m *DeviceStorage) GetUserDeviceID(ctx context.Context, userID string, userAgent string) (string, error) {
	ret := _m.Called(ctx, userID, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDeviceID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, userID, userAgent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, userID, userAgent)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, userAgent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceStorage_GetUserDeviceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDeviceID'
type DeviceStorage_GetUserDeviceID_Call struct {
	*mock.Call
}

// GetUserDeviceID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - userAgent string
func (_e *DeviceStorage_Expecter) GetUserDeviceID(ctx interface{}, userID interface{}, userAgent interface{}) *DeviceStorage_GetUserDeviceID_Call {
	return &DeviceStorage_GetUserDeviceID_Call{Call: _e.mock.On("GetUserDeviceID", ctx, userID, userAgent)}
}

func (_c *DeviceStorage_GetUserDeviceID_Call) Run(run func(ctx context.Context, userID string, userAgent string)) *DeviceStorage_GetUserDeviceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DeviceStorage_GetUserDeviceID_Call) Return(_a0 string, _a1 error) *DeviceStorage_GetUserDeviceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceStorage_GetUserDeviceID_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *DeviceStorage_GetUserDeviceID_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterDevice provides a mock function with given fields: ctx, device
func (_m *DeviceStorage) RegisterDevice(ctx context.Context, device entity.UserDevice) error {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserDevice) error); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceStorage_RegisterDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDevice'
type DeviceStorage_RegisterDevice_Call struct {
	*mock.Call
}

// RegisterDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - device entity.UserDevice
func (_e *DeviceStorage_Expecter) RegisterDevice(ctx interface{}, device interface{}) *DeviceStorage_RegisterDevice_Call {
	return &DeviceStorage_RegisterDevice_Call{Call: _e.mock.On("RegisterDevice", ctx, device)}
}

func (_c *DeviceStorage_RegisterDevice_Call) Run(run func(ctx context.Context, device entity.UserDevice)) *DeviceStorage_RegisterDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserDevice))
	})
	return _c
}

func (_c *DeviceStorage_RegisterDevice_Call) Return(_a0 error) *DeviceStorage_RegisterDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceStorage_RegisterDevice_Call) RunAndReturn(run func(context.Context, entity.UserDevice) error) *DeviceStorage_RegisterDevice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastVisitedAt provides a mock function with given fields: ctx, _a1
func (_m *DeviceStorage) UpdateLastVisitedAt(ctx context.Context, _a1 entity.Session) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastVisitedAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Session) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceStorage_UpdateLastVisitedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastVisitedAt'
type DeviceStorage_UpdateLastVisitedAt_Call struct {
	*mock.Call
}

// UpdateLastVisitedAt is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 entity.Session
func (_e *DeviceStorage_Expecter) UpdateLastVisitedAt(ctx interface{}, _a1 interface{}) *DeviceStorage_UpdateLastVisitedAt_Call {
	return &DeviceStorage_UpdateLastVisitedAt_Call{Call: _e.mock.On("UpdateLastVisitedAt", ctx, _a1)}
}

func (_c *DeviceStorage_UpdateLastVisitedAt_Call) Run(run func(ctx context.Context, _a1 entity.Session)) *DeviceStorage_UpdateLastVisitedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Session))
	})
	return _c
}

func (_c *DeviceStorage_UpdateLastVisitedAt_Call) Return(_a0 error) *DeviceStorage_UpdateLastVisitedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceStorage_UpdateLastVisitedAt_Call) RunAndReturn(run func(context.Context, entity.Session) error) *DeviceStorage_UpdateLastVisitedAt_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeviceStorage creates a new instance of DeviceStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceStorage {
	mock := &DeviceStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
