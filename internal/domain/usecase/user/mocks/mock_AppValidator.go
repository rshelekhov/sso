// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AppValidator is an autogenerated mock type for the AppValidator type
type AppValidator struct {
	mock.Mock
}

type AppValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *AppValidator) EXPECT() *AppValidator_Expecter {
	return &AppValidator_Expecter{mock: &_m.Mock}
}

// ValidateAppID provides a mock function with given fields: ctx, appID
func (_m *AppValidator) ValidateAppID(ctx context.Context, appID string) error {
	ret := _m.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAppID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppValidator_ValidateAppID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAppID'
type AppValidator_ValidateAppID_Call struct {
	*mock.Call
}

// ValidateAppID is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
func (_e *AppValidator_Expecter) ValidateAppID(ctx interface{}, appID interface{}) *AppValidator_ValidateAppID_Call {
	return &AppValidator_ValidateAppID_Call{Call: _e.mock.On("ValidateAppID", ctx, appID)}
}

func (_c *AppValidator_ValidateAppID_Call) Run(run func(ctx context.Context, appID string)) *AppValidator_ValidateAppID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AppValidator_ValidateAppID_Call) Return(_a0 error) *AppValidator_ValidateAppID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppValidator_ValidateAppID_Call) RunAndReturn(run func(context.Context, string) error) *AppValidator_ValidateAppID_Call {
	_c.Call.Return(run)
	return _c
}

// NewAppValidator creates a new instance of AppValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppValidator {
	mock := &AppValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
