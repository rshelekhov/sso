// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ContextManager is an autogenerated mock type for the ContextManager type
type ContextManager struct {
	mock.Mock
}

type ContextManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ContextManager) EXPECT() *ContextManager_Expecter {
	return &ContextManager_Expecter{mock: &_m.Mock}
}

// FromContext provides a mock function with given fields: ctx
func (_m *ContextManager) FromContext(ctx context.Context) (string, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FromContext")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (string, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ContextManager_FromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromContext'
type ContextManager_FromContext_Call struct {
	*mock.Call
}

// FromContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ContextManager_Expecter) FromContext(ctx interface{}) *ContextManager_FromContext_Call {
	return &ContextManager_FromContext_Call{Call: _e.mock.On("FromContext", ctx)}
}

func (_c *ContextManager_FromContext_Call) Run(run func(ctx context.Context)) *ContextManager_FromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ContextManager_FromContext_Call) Return(_a0 string, _a1 bool) *ContextManager_FromContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContextManager_FromContext_Call) RunAndReturn(run func(context.Context) (string, bool)) *ContextManager_FromContext_Call {
	_c.Call.Return(run)
	return _c
}

// ToContext provides a mock function with given fields: ctx, value
func (_m *ContextManager) ToContext(ctx context.Context, value string) context.Context {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for ToContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// ContextManager_ToContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToContext'
type ContextManager_ToContext_Call struct {
	*mock.Call
}

// ToContext is a helper method to define mock.On call
//   - ctx context.Context
//   - value string
func (_e *ContextManager_Expecter) ToContext(ctx interface{}, value interface{}) *ContextManager_ToContext_Call {
	return &ContextManager_ToContext_Call{Call: _e.mock.On("ToContext", ctx, value)}
}

func (_c *ContextManager_ToContext_Call) Run(run func(ctx context.Context, value string)) *ContextManager_ToContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ContextManager_ToContext_Call) Return(_a0 context.Context) *ContextManager_ToContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextManager_ToContext_Call) RunAndReturn(run func(context.Context, string) context.Context) *ContextManager_ToContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewContextManager creates a new instance of ContextManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContextManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContextManager {
	mock := &ContextManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
