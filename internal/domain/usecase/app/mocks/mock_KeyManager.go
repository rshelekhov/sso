// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// KeyManager is an autogenerated mock type for the KeyManager type
type KeyManager struct {
	mock.Mock
}

type KeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyManager) EXPECT() *KeyManager_Expecter {
	return &KeyManager_Expecter{mock: &_m.Mock}
}

// GenerateAndSavePrivateKey provides a mock function with given fields: appID
func (_m *KeyManager) GenerateAndSavePrivateKey(appID string) error {
	ret := _m.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAndSavePrivateKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyManager_GenerateAndSavePrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAndSavePrivateKey'
type KeyManager_GenerateAndSavePrivateKey_Call struct {
	*mock.Call
}

// GenerateAndSavePrivateKey is a helper method to define mock.On call
//   - appID string
func (_e *KeyManager_Expecter) GenerateAndSavePrivateKey(appID interface{}) *KeyManager_GenerateAndSavePrivateKey_Call {
	return &KeyManager_GenerateAndSavePrivateKey_Call{Call: _e.mock.On("GenerateAndSavePrivateKey", appID)}
}

func (_c *KeyManager_GenerateAndSavePrivateKey_Call) Run(run func(appID string)) *KeyManager_GenerateAndSavePrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *KeyManager_GenerateAndSavePrivateKey_Call) Return(_a0 error) *KeyManager_GenerateAndSavePrivateKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyManager_GenerateAndSavePrivateKey_Call) RunAndReturn(run func(string) error) *KeyManager_GenerateAndSavePrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// PublicKey provides a mock function with given fields: appID
func (_m *KeyManager) PublicKey(appID string) (interface{}, error) {
	ret := _m.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for PublicKey")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(appID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyManager_PublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicKey'
type KeyManager_PublicKey_Call struct {
	*mock.Call
}

// PublicKey is a helper method to define mock.On call
//   - appID string
func (_e *KeyManager_Expecter) PublicKey(appID interface{}) *KeyManager_PublicKey_Call {
	return &KeyManager_PublicKey_Call{Call: _e.mock.On("PublicKey", appID)}
}

func (_c *KeyManager_PublicKey_Call) Run(run func(appID string)) *KeyManager_PublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *KeyManager_PublicKey_Call) Return(_a0 interface{}, _a1 error) *KeyManager_PublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyManager_PublicKey_Call) RunAndReturn(run func(string) (interface{}, error)) *KeyManager_PublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeyManager creates a new instance of KeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyManager {
	mock := &KeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
