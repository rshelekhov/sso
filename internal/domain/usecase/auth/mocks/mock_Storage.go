// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/sso/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// MarkEmailVerified provides a mock function with given fields: ctx, userID, clientID
func (_m *Storage) MarkEmailVerified(ctx context.Context, userID string, clientID string) error {
	ret := _m.Called(ctx, userID, clientID)

	if len(ret) == 0 {
		panic("no return value specified for MarkEmailVerified")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_MarkEmailVerified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkEmailVerified'
type Storage_MarkEmailVerified_Call struct {
	*mock.Call
}

// MarkEmailVerified is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - clientID string
func (_e *Storage_Expecter) MarkEmailVerified(ctx interface{}, userID interface{}, clientID interface{}) *Storage_MarkEmailVerified_Call {
	return &Storage_MarkEmailVerified_Call{Call: _e.mock.On("MarkEmailVerified", ctx, userID, clientID)}
}

func (_c *Storage_MarkEmailVerified_Call) Run(run func(ctx context.Context, userID string, clientID string)) *Storage_MarkEmailVerified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_MarkEmailVerified_Call) Return(_a0 error) *Storage_MarkEmailVerified_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_MarkEmailVerified_Call) RunAndReturn(run func(context.Context, string, string) error) *Storage_MarkEmailVerified_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *Storage) RegisterUser(ctx context.Context, user entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type Storage_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user entity.User
func (_e *Storage_Expecter) RegisterUser(ctx interface{}, user interface{}) *Storage_RegisterUser_Call {
	return &Storage_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, user)}
}

func (_c *Storage_RegisterUser_Call) Run(run func(ctx context.Context, user entity.User)) *Storage_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.User))
	})
	return _c
}

func (_c *Storage_RegisterUser_Call) Return(_a0 error) *Storage_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_RegisterUser_Call) RunAndReturn(run func(context.Context, entity.User) error) *Storage_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceSoftDeletedUser provides a mock function with given fields: ctx, user
func (_m *Storage) ReplaceSoftDeletedUser(ctx context.Context, user entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceSoftDeletedUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_ReplaceSoftDeletedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceSoftDeletedUser'
type Storage_ReplaceSoftDeletedUser_Call struct {
	*mock.Call
}

// ReplaceSoftDeletedUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user entity.User
func (_e *Storage_Expecter) ReplaceSoftDeletedUser(ctx interface{}, user interface{}) *Storage_ReplaceSoftDeletedUser_Call {
	return &Storage_ReplaceSoftDeletedUser_Call{Call: _e.mock.On("ReplaceSoftDeletedUser", ctx, user)}
}

func (_c *Storage_ReplaceSoftDeletedUser_Call) Run(run func(ctx context.Context, user entity.User)) *Storage_ReplaceSoftDeletedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.User))
	})
	return _c
}

func (_c *Storage_ReplaceSoftDeletedUser_Call) Return(_a0 error) *Storage_ReplaceSoftDeletedUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_ReplaceSoftDeletedUser_Call) RunAndReturn(run func(context.Context, entity.User) error) *Storage_ReplaceSoftDeletedUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
