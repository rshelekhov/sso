// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/sso/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// VerificationManager is an autogenerated mock type for the VerificationManager type
type VerificationManager struct {
	mock.Mock
}

type VerificationManager_Expecter struct {
	mock *mock.Mock
}

func (_m *VerificationManager) EXPECT() *VerificationManager_Expecter {
	return &VerificationManager_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with given fields: ctx, user, verificationEndpoint, tokenType
func (_m *VerificationManager) CreateToken(ctx context.Context, user entity.User, verificationEndpoint string, tokenType entity.VerificationTokenType) (entity.VerificationToken, error) {
	ret := _m.Called(ctx, user, verificationEndpoint, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 entity.VerificationToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User, string, entity.VerificationTokenType) (entity.VerificationToken, error)); ok {
		return rf(ctx, user, verificationEndpoint, tokenType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.User, string, entity.VerificationTokenType) entity.VerificationToken); ok {
		r0 = rf(ctx, user, verificationEndpoint, tokenType)
	} else {
		r0 = ret.Get(0).(entity.VerificationToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.User, string, entity.VerificationTokenType) error); ok {
		r1 = rf(ctx, user, verificationEndpoint, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerificationManager_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type VerificationManager_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - user entity.User
//   - verificationEndpoint string
//   - tokenType entity.VerificationTokenType
func (_e *VerificationManager_Expecter) CreateToken(ctx interface{}, user interface{}, verificationEndpoint interface{}, tokenType interface{}) *VerificationManager_CreateToken_Call {
	return &VerificationManager_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, user, verificationEndpoint, tokenType)}
}

func (_c *VerificationManager_CreateToken_Call) Run(run func(ctx context.Context, user entity.User, verificationEndpoint string, tokenType entity.VerificationTokenType)) *VerificationManager_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.User), args[2].(string), args[3].(entity.VerificationTokenType))
	})
	return _c
}

func (_c *VerificationManager_CreateToken_Call) Return(_a0 entity.VerificationToken, _a1 error) *VerificationManager_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerificationManager_CreateToken_Call) RunAndReturn(run func(context.Context, entity.User, string, entity.VerificationTokenType) (entity.VerificationToken, error)) *VerificationManager_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteToken provides a mock function with given fields: ctx, token
func (_m *VerificationManager) DeleteToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerificationManager_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type VerificationManager_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *VerificationManager_Expecter) DeleteToken(ctx interface{}, token interface{}) *VerificationManager_DeleteToken_Call {
	return &VerificationManager_DeleteToken_Call{Call: _e.mock.On("DeleteToken", ctx, token)}
}

func (_c *VerificationManager_DeleteToken_Call) Run(run func(ctx context.Context, token string)) *VerificationManager_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *VerificationManager_DeleteToken_Call) Return(_a0 error) *VerificationManager_DeleteToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VerificationManager_DeleteToken_Call) RunAndReturn(run func(context.Context, string) error) *VerificationManager_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenData provides a mock function with given fields: ctx, token
func (_m *VerificationManager) GetTokenData(ctx context.Context, token string) (entity.VerificationToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenData")
	}

	var r0 entity.VerificationToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.VerificationToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.VerificationToken); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(entity.VerificationToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerificationManager_GetTokenData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenData'
type VerificationManager_GetTokenData_Call struct {
	*mock.Call
}

// GetTokenData is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *VerificationManager_Expecter) GetTokenData(ctx interface{}, token interface{}) *VerificationManager_GetTokenData_Call {
	return &VerificationManager_GetTokenData_Call{Call: _e.mock.On("GetTokenData", ctx, token)}
}

func (_c *VerificationManager_GetTokenData_Call) Run(run func(ctx context.Context, token string)) *VerificationManager_GetTokenData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *VerificationManager_GetTokenData_Call) Return(_a0 entity.VerificationToken, _a1 error) *VerificationManager_GetTokenData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerificationManager_GetTokenData_Call) RunAndReturn(run func(context.Context, string) (entity.VerificationToken, error)) *VerificationManager_GetTokenData_Call {
	_c.Call.Return(run)
	return _c
}

// NewVerificationManager creates a new instance of VerificationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerificationManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *VerificationManager {
	mock := &VerificationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
