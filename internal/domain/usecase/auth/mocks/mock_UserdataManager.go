// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/sso/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserdataManager is an autogenerated mock type for the UserdataManager type
type UserdataManager struct {
	mock.Mock
}

type UserdataManager_Expecter struct {
	mock *mock.Mock
}

func (_m *UserdataManager) EXPECT() *UserdataManager_Expecter {
	return &UserdataManager_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function with given fields: ctx, appID, email
func (_m *UserdataManager) GetUserByEmail(ctx context.Context, appID string, email string) (entity.User, error) {
	ret := _m.Called(ctx, appID, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.User, error)); ok {
		return rf(ctx, appID, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.User); ok {
		r0 = rf(ctx, appID, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserdataManager_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserdataManager_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
//   - email string
func (_e *UserdataManager_Expecter) GetUserByEmail(ctx interface{}, appID interface{}, email interface{}) *UserdataManager_GetUserByEmail_Call {
	return &UserdataManager_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, appID, email)}
}

func (_c *UserdataManager_GetUserByEmail_Call) Run(run func(ctx context.Context, appID string, email string)) *UserdataManager_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserdataManager_GetUserByEmail_Call) Return(_a0 entity.User, _a1 error) *UserdataManager_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserdataManager_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string, string) (entity.User, error)) *UserdataManager_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserData provides a mock function with given fields: ctx, appID, userID
func (_m *UserdataManager) GetUserData(ctx context.Context, appID string, userID string) (entity.User, error) {
	ret := _m.Called(ctx, appID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserData")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.User, error)); ok {
		return rf(ctx, appID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.User); ok {
		r0 = rf(ctx, appID, userID)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserdataManager_GetUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserData'
type UserdataManager_GetUserData_Call struct {
	*mock.Call
}

// GetUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
//   - userID string
func (_e *UserdataManager_Expecter) GetUserData(ctx interface{}, appID interface{}, userID interface{}) *UserdataManager_GetUserData_Call {
	return &UserdataManager_GetUserData_Call{Call: _e.mock.On("GetUserData", ctx, appID, userID)}
}

func (_c *UserdataManager_GetUserData_Call) Run(run func(ctx context.Context, appID string, userID string)) *UserdataManager_GetUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserdataManager_GetUserData_Call) Return(_a0 entity.User, _a1 error) *UserdataManager_GetUserData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserdataManager_GetUserData_Call) RunAndReturn(run func(context.Context, string, string) (entity.User, error)) *UserdataManager_GetUserData_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserStatusByEmail provides a mock function with given fields: ctx, email
func (_m *UserdataManager) GetUserStatusByEmail(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserStatusByEmail")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserdataManager_GetUserStatusByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserStatusByEmail'
type UserdataManager_GetUserStatusByEmail_Call struct {
	*mock.Call
}

// GetUserStatusByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserdataManager_Expecter) GetUserStatusByEmail(ctx interface{}, email interface{}) *UserdataManager_GetUserStatusByEmail_Call {
	return &UserdataManager_GetUserStatusByEmail_Call{Call: _e.mock.On("GetUserStatusByEmail", ctx, email)}
}

func (_c *UserdataManager_GetUserStatusByEmail_Call) Run(run func(ctx context.Context, email string)) *UserdataManager_GetUserStatusByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserdataManager_GetUserStatusByEmail_Call) Return(_a0 string, _a1 error) *UserdataManager_GetUserStatusByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserdataManager_GetUserStatusByEmail_Call) RunAndReturn(run func(context.Context, string) (string, error)) *UserdataManager_GetUserStatusByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserData provides a mock function with given fields: ctx, user
func (_m *UserdataManager) UpdateUserData(ctx context.Context, user entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserdataManager_UpdateUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserData'
type UserdataManager_UpdateUserData_Call struct {
	*mock.Call
}

// UpdateUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - user entity.User
func (_e *UserdataManager_Expecter) UpdateUserData(ctx interface{}, user interface{}) *UserdataManager_UpdateUserData_Call {
	return &UserdataManager_UpdateUserData_Call{Call: _e.mock.On("UpdateUserData", ctx, user)}
}

func (_c *UserdataManager_UpdateUserData_Call) Run(run func(ctx context.Context, user entity.User)) *UserdataManager_UpdateUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.User))
	})
	return _c
}

func (_c *UserdataManager_UpdateUserData_Call) Return(_a0 error) *UserdataManager_UpdateUserData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserdataManager_UpdateUserData_Call) RunAndReturn(run func(context.Context, entity.User) error) *UserdataManager_UpdateUserData_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserdataManager creates a new instance of UserdataManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserdataManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserdataManager {
	mock := &UserdataManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
