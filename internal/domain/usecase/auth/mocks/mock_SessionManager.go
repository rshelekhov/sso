// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/sso/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// SessionManager is an autogenerated mock type for the SessionManager type
type SessionManager struct {
	mock.Mock
}

type SessionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionManager) EXPECT() *SessionManager_Expecter {
	return &SessionManager_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, reqData
func (_m *SessionManager) CreateSession(ctx context.Context, reqData entity.SessionRequestData) (entity.SessionTokens, error) {
	ret := _m.Called(ctx, reqData)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 entity.SessionTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SessionRequestData) (entity.SessionTokens, error)); ok {
		return rf(ctx, reqData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SessionRequestData) entity.SessionTokens); ok {
		r0 = rf(ctx, reqData)
	} else {
		r0 = ret.Get(0).(entity.SessionTokens)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SessionRequestData) error); ok {
		r1 = rf(ctx, reqData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionManager_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionManager_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - reqData entity.SessionRequestData
func (_e *SessionManager_Expecter) CreateSession(ctx interface{}, reqData interface{}) *SessionManager_CreateSession_Call {
	return &SessionManager_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, reqData)}
}

func (_c *SessionManager_CreateSession_Call) Run(run func(ctx context.Context, reqData entity.SessionRequestData)) *SessionManager_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SessionRequestData))
	})
	return _c
}

func (_c *SessionManager_CreateSession_Call) Return(_a0 entity.SessionTokens, _a1 error) *SessionManager_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionManager_CreateSession_Call) RunAndReturn(run func(context.Context, entity.SessionRequestData) (entity.SessionTokens, error)) *SessionManager_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *SessionManager) DeleteRefreshToken(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionManager_DeleteRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefreshToken'
type SessionManager_DeleteRefreshToken_Call struct {
	*mock.Call
}

// DeleteRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *SessionManager_Expecter) DeleteRefreshToken(ctx interface{}, refreshToken interface{}) *SessionManager_DeleteRefreshToken_Call {
	return &SessionManager_DeleteRefreshToken_Call{Call: _e.mock.On("DeleteRefreshToken", ctx, refreshToken)}
}

func (_c *SessionManager_DeleteRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *SessionManager_DeleteRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionManager_DeleteRefreshToken_Call) Return(_a0 error) *SessionManager_DeleteRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionManager_DeleteRefreshToken_Call) RunAndReturn(run func(context.Context, string) error) *SessionManager_DeleteRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, sessionReqData
func (_m *SessionManager) DeleteSession(ctx context.Context, sessionReqData entity.SessionRequestData) error {
	ret := _m.Called(ctx, sessionReqData)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SessionRequestData) error); ok {
		r0 = rf(ctx, sessionReqData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionManager_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type SessionManager_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionReqData entity.SessionRequestData
func (_e *SessionManager_Expecter) DeleteSession(ctx interface{}, sessionReqData interface{}) *SessionManager_DeleteSession_Call {
	return &SessionManager_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, sessionReqData)}
}

func (_c *SessionManager_DeleteSession_Call) Run(run func(ctx context.Context, sessionReqData entity.SessionRequestData)) *SessionManager_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SessionRequestData))
	})
	return _c
}

func (_c *SessionManager_DeleteSession_Call) Return(_a0 error) *SessionManager_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionManager_DeleteSession_Call) RunAndReturn(run func(context.Context, entity.SessionRequestData) error) *SessionManager_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *SessionManager) GetSessionByRefreshToken(ctx context.Context, refreshToken string) (entity.Session, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByRefreshToken")
	}

	var r0 entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Session, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Session); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(entity.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionManager_GetSessionByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByRefreshToken'
type SessionManager_GetSessionByRefreshToken_Call struct {
	*mock.Call
}

// GetSessionByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *SessionManager_Expecter) GetSessionByRefreshToken(ctx interface{}, refreshToken interface{}) *SessionManager_GetSessionByRefreshToken_Call {
	return &SessionManager_GetSessionByRefreshToken_Call{Call: _e.mock.On("GetSessionByRefreshToken", ctx, refreshToken)}
}

func (_c *SessionManager_GetSessionByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *SessionManager_GetSessionByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionManager_GetSessionByRefreshToken_Call) Return(_a0 entity.Session, _a1 error) *SessionManager_GetSessionByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionManager_GetSessionByRefreshToken_Call) RunAndReturn(run func(context.Context, string) (entity.Session, error)) *SessionManager_GetSessionByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDeviceID provides a mock function with given fields: ctx, userID, userAgent
func (_m *SessionManager) GetUserDeviceID(ctx context.Context, userID string, userAgent string) (string, error) {
	ret := _m.Called(ctx, userID, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDeviceID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, userID, userAgent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, userID, userAgent)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, userAgent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionManager_GetUserDeviceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDeviceID'
type SessionManager_GetUserDeviceID_Call struct {
	*mock.Call
}

// GetUserDeviceID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - userAgent string
func (_e *SessionManager_Expecter) GetUserDeviceID(ctx interface{}, userID interface{}, userAgent interface{}) *SessionManager_GetUserDeviceID_Call {
	return &SessionManager_GetUserDeviceID_Call{Call: _e.mock.On("GetUserDeviceID", ctx, userID, userAgent)}
}

func (_c *SessionManager_GetUserDeviceID_Call) Run(run func(ctx context.Context, userID string, userAgent string)) *SessionManager_GetUserDeviceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SessionManager_GetUserDeviceID_Call) Return(_a0 string, _a1 error) *SessionManager_GetUserDeviceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionManager_GetUserDeviceID_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *SessionManager_GetUserDeviceID_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionManager creates a new instance of SessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionManager {
	mock := &SessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
