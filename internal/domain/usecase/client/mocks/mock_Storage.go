// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rshelekhov/sso/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// DeleteClient provides a mock function with given fields: ctx, data
func (_m *Storage) DeleteClient(ctx context.Context, data entity.ClientData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ClientData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_DeleteClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClient'
type Storage_DeleteClient_Call struct {
	*mock.Call
}

// DeleteClient is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.ClientData
func (_e *Storage_Expecter) DeleteClient(ctx interface{}, data interface{}) *Storage_DeleteClient_Call {
	return &Storage_DeleteClient_Call{Call: _e.mock.On("DeleteClient", ctx, data)}
}

func (_c *Storage_DeleteClient_Call) Run(run func(ctx context.Context, data entity.ClientData)) *Storage_DeleteClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ClientData))
	})
	return _c
}

func (_c *Storage_DeleteClient_Call) Return(_a0 error) *Storage_DeleteClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_DeleteClient_Call) RunAndReturn(run func(context.Context, entity.ClientData) error) *Storage_DeleteClient_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterClient provides a mock function with given fields: ctx, data
func (_m *Storage) RegisterClient(ctx context.Context, data entity.ClientData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for RegisterClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ClientData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_RegisterClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterClient'
type Storage_RegisterClient_Call struct {
	*mock.Call
}

// RegisterClient is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.ClientData
func (_e *Storage_Expecter) RegisterClient(ctx interface{}, data interface{}) *Storage_RegisterClient_Call {
	return &Storage_RegisterClient_Call{Call: _e.mock.On("RegisterClient", ctx, data)}
}

func (_c *Storage_RegisterClient_Call) Run(run func(ctx context.Context, data entity.ClientData)) *Storage_RegisterClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ClientData))
	})
	return _c
}

func (_c *Storage_RegisterClient_Call) Return(_a0 error) *Storage_RegisterClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_RegisterClient_Call) RunAndReturn(run func(context.Context, entity.ClientData) error) *Storage_RegisterClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
