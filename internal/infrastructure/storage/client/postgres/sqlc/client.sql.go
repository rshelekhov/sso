// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: client.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkClientIDExists = `-- name: CheckClientIDExists :one
SELECT EXISTS(
    SELECT 1
    FROM clients
    WHERE id = $1
        AND deleted_at IS NULL
    )
`

func (q *Queries) CheckClientIDExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, checkClientIDExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteClient = `-- name: DeleteClient :exec
UPDATE clients
SET deleted_at = $1
WHERE id = $2
  AND secret = $3
  AND deleted_at IS NULL
`

type DeleteClientParams struct {
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
	ID        string             `db:"id"`
	Secret    string             `db:"secret"`
}

func (q *Queries) DeleteClient(ctx context.Context, arg DeleteClientParams) error {
	_, err := q.db.Exec(ctx, deleteClient, arg.DeletedAt, arg.ID, arg.Secret)
	return err
}

const insertClient = `-- name: InsertClient :exec
INSERT INTO clients (id, name, secret, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertClientParams struct {
	ID        string    `db:"id"`
	Name      string    `db:"name"`
	Secret    string    `db:"secret"`
	Status    int32     `db:"status"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

func (q *Queries) InsertClient(ctx context.Context, arg InsertClientParams) error {
	_, err := q.db.Exec(ctx, insertClient,
		arg.ID,
		arg.Name,
		arg.Secret,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
