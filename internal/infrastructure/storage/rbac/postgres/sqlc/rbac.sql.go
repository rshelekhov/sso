// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: rbac.sql

package sqlc

import (
	"context"
)

const getUserRole = `-- name: GetUserRole :one
SELECT role
FROM users
WHERE id = $1
  AND app_id = $2
  AND deleted_at IS NULL
`

type GetUserRoleParams struct {
	ID    string `db:"id"`
	AppID string `db:"app_id"`
}

func (q *Queries) GetUserRole(ctx context.Context, arg GetUserRoleParams) (string, error) {
	row := q.db.QueryRow(ctx, getUserRole, arg.ID, arg.AppID)
	var role string
	err := row.Scan(&role)
	return role, err
}

const setUserRole = `-- name: SetUserRole :one
UPDATE users
SET role = $1
WHERE id = $2
  AND app_id = $3
  AND deleted_at IS NULL
RETURNING id
`

type SetUserRoleParams struct {
	Role  string `db:"role"`
	ID    string `db:"id"`
	AppID string `db:"app_id"`
}

func (q *Queries) SetUserRole(ctx context.Context, arg SetUserRoleParams) (string, error) {
	row := q.db.QueryRow(ctx, setUserRole, arg.Role, arg.ID, arg.AppID)
	var id string
	err := row.Scan(&id)
	return id, err
}
