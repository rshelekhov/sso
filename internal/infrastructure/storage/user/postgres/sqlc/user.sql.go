// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = $1
WHERE id = $2
  AND app_id = $3
  AND deleted_at IS NULL
`

type DeleteUserParams struct {
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
	ID        string             `db:"id"`
	AppID     string             `db:"app_id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.DeletedAt, arg.ID, arg.AppID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, role, app_id, updated_at
FROM users
WHERE email = $1
  AND app_id = $2
  AND deleted_at IS NULL
`

type GetUserByEmailParams struct {
	Email string `db:"email"`
	AppID string `db:"app_id"`
}

type GetUserByEmailRow struct {
	ID        string    `db:"id"`
	Email     string    `db:"email"`
	Role      string    `db:"role"`
	AppID     string    `db:"app_id"`
	UpdatedAt time.Time `db:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Email, arg.AppID)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.AppID,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, role, app_id, verified, updated_at
FROM users
WHERE id = $1
  AND app_id = $2
  AND deleted_at IS NULL
`

type GetUserByIDParams struct {
	ID    string `db:"id"`
	AppID string `db:"app_id"`
}

type GetUserByIDRow struct {
	ID        string      `db:"id"`
	Email     string      `db:"email"`
	Role      string      `db:"role"`
	AppID     string      `db:"app_id"`
	Verified  pgtype.Bool `db:"verified"`
	UpdatedAt time.Time   `db:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, arg GetUserByIDParams) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, arg.ID, arg.AppID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.AppID,
		&i.Verified,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserData = `-- name: GetUserData :one
SELECT id, email, role, password_hash, app_id, updated_at
FROM users
WHERE id = $1
  AND app_id = $2
  AND deleted_at IS NULL
`

type GetUserDataParams struct {
	ID    string `db:"id"`
	AppID string `db:"app_id"`
}

type GetUserDataRow struct {
	ID           string    `db:"id"`
	Email        string    `db:"email"`
	Role         string    `db:"role"`
	PasswordHash string    `db:"password_hash"`
	AppID        string    `db:"app_id"`
	UpdatedAt    time.Time `db:"updated_at"`
}

func (q *Queries) GetUserData(ctx context.Context, arg GetUserDataParams) (GetUserDataRow, error) {
	row := q.db.QueryRow(ctx, getUserData, arg.ID, arg.AppID)
	var i GetUserDataRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.PasswordHash,
		&i.AppID,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserStatusByEmail = `-- name: GetUserStatusByEmail :one
SELECT CASE
           WHEN EXISTS(
               SELECT 1
               FROM users
               WHERE users.email = $1
                 AND users.app_id = $2
                 AND deleted_at IS NULL
           ) THEN 'active'
           WHEN EXISTS(
               SELECT 1
               FROM users
               WHERE users.email = $1
                 AND users.app_id = $2
                 AND deleted_at IS NOT NULL
           ) THEN 'soft_deleted'
           ELSE 'not_found' END AS status
`

type GetUserStatusByEmailParams struct {
	Email string `db:"email"`
	AppID string `db:"app_id"`
}

func (q *Queries) GetUserStatusByEmail(ctx context.Context, arg GetUserStatusByEmailParams) (string, error) {
	row := q.db.QueryRow(ctx, getUserStatusByEmail, arg.Email, arg.AppID)
	var status string
	err := row.Scan(&status)
	return status, err
}

const getUserStatusByID = `-- name: GetUserStatusByID :one
SELECT CASE
           WHEN EXISTS(
               SELECT 1
               FROM users
               WHERE users.id = $1
                 AND users.app_id = $2
                 AND deleted_at IS NULL
           ) THEN 'active'
           WHEN EXISTS(
               SELECT 1
               FROM users
               WHERE users.id = $1
                 AND users.app_id = $2
                 AND deleted_at IS NOT NULL
           ) THEN 'soft_deleted'
           ELSE 'not_found' END AS status
`

type GetUserStatusByIDParams struct {
	ID    string `db:"id"`
	AppID string `db:"app_id"`
}

func (q *Queries) GetUserStatusByID(ctx context.Context, arg GetUserStatusByIDParams) (string, error) {
	row := q.db.QueryRow(ctx, getUserStatusByID, arg.ID, arg.AppID)
	var status string
	err := row.Scan(&status)
	return status, err
}
