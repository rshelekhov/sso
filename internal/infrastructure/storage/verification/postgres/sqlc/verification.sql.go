// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: verification.sql

package sqlc

import (
	"context"
	"time"
)

const deleteVerificationToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE token = $1
`

func (q *Queries) DeleteVerificationToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteVerificationToken, token)
	return err
}

const getVerificationTokenData = `-- name: GetTokenData :one
SELECT token, user_id, app_id, endpoint, token_type_id, recipient, expires_at
FROM tokens
WHERE token = $1
`

type GetVerificationTokenDataRow struct {
	Token       string    `db:"token"`
	UserID      string    `db:"user_id"`
	AppID       string    `db:"app_id"`
	Endpoint    string    `db:"endpoint"`
	TokenTypeID int32     `db:"token_type_id"`
	Recipient   string    `db:"recipient"`
	ExpiresAt   time.Time `db:"expires_at"`
}

func (q *Queries) GetVerificationTokenData(ctx context.Context, token string) (GetVerificationTokenDataRow, error) {
	row := q.db.QueryRow(ctx, getVerificationTokenData, token)
	var i GetVerificationTokenDataRow
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.AppID,
		&i.Endpoint,
		&i.TokenTypeID,
		&i.Recipient,
		&i.ExpiresAt,
	)
	return i, err
}

const saveVerificationToken = `-- name: SaveVerificationToken :exec
INSERT INTO tokens (token, user_id, app_id, endpoint, recipient, token_type_id,  created_at, expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type SaveVerificationTokenParams struct {
	Token       string    `db:"token"`
	UserID      string    `db:"user_id"`
	AppID       string    `db:"app_id"`
	Endpoint    string    `db:"endpoint"`
	Recipient   string    `db:"recipient"`
	TokenTypeID int32     `db:"token_type_id"`
	CreatedAt   time.Time `db:"created_at"`
	ExpiresAt   time.Time `db:"expires_at"`
}

func (q *Queries) SaveVerificationToken(ctx context.Context, arg SaveVerificationTokenParams) error {
	_, err := q.db.Exec(ctx, saveVerificationToken,
		arg.Token,
		arg.UserID,
		arg.AppID,
		arg.Endpoint,
		arg.Recipient,
		arg.TokenTypeID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}
