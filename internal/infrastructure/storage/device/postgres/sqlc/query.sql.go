// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const deleteAllUserDevices = `-- name: DeleteAllUserDevices :exec
DELETE FROM user_devices
WHERE user_id = $1
  AND client_id = $2
`

type DeleteAllUserDevicesParams struct {
	UserID   string `db:"user_id"`
	ClientID string `db:"client_id"`
}

func (q *Queries) DeleteAllUserDevices(ctx context.Context, arg DeleteAllUserDevicesParams) error {
	_, err := q.db.Exec(ctx, deleteAllUserDevices, arg.UserID, arg.ClientID)
	return err
}

const getUserDeviceID = `-- name: GetUserDeviceID :one
SELECT id
FROM user_devices
WHERE user_id = $1
  AND user_agent = $2
  AND client_id = $3
  AND detached = FALSE
`

type GetUserDeviceIDParams struct {
	UserID    string `db:"user_id"`
	UserAgent string `db:"user_agent"`
	ClientID  string `db:"client_id"`
}

func (q *Queries) GetUserDeviceID(ctx context.Context, arg GetUserDeviceIDParams) (string, error) {
	row := q.db.QueryRow(ctx, getUserDeviceID, arg.UserID, arg.UserAgent, arg.ClientID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const registerDevice = `-- name: RegisterDevice :exec
INSERT INTO user_devices (id, user_id, client_id, user_agent, ip, detached, last_visited_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type RegisterDeviceParams struct {
	ID            string    `db:"id"`
	UserID        string    `db:"user_id"`
	ClientID      string    `db:"client_id"`
	UserAgent     string    `db:"user_agent"`
	Ip            string    `db:"ip"`
	Detached      bool      `db:"detached"`
	LastVisitedAt time.Time `db:"last_visited_at"`
}

func (q *Queries) RegisterDevice(ctx context.Context, arg RegisterDeviceParams) error {
	_, err := q.db.Exec(ctx, registerDevice,
		arg.ID,
		arg.UserID,
		arg.ClientID,
		arg.UserAgent,
		arg.Ip,
		arg.Detached,
		arg.LastVisitedAt,
	)
	return err
}

const updateLastVisitedAt = `-- name: UpdateLastVisitedAt :exec
UPDATE user_devices
SET last_visited_at = $1
WHERE id = $2
  AND client_id = $3
`

type UpdateLastVisitedAtParams struct {
	LastVisitedAt time.Time `db:"last_visited_at"`
	ID            string    `db:"id"`
	ClientID      string    `db:"client_id"`
}

func (q *Queries) UpdateLastVisitedAt(ctx context.Context, arg UpdateLastVisitedAtParams) error {
	_, err := q.db.Exec(ctx, updateLastVisitedAt, arg.LastVisitedAt, arg.ID, arg.ClientID)
	return err
}
