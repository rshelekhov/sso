// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const deleteAllUserDevices = `-- name: DeleteAllUserDevices :one
WITH deleted AS (
  DELETE FROM user_devices
  WHERE user_id = $1 AND detached = FALSE
  RETURNING 1
)
SELECT COUNT(*)::int AS deleted_count
FROM deleted
`

func (q *Queries) DeleteAllUserDevices(ctx context.Context, userID string) (int32, error) {
	row := q.db.QueryRow(ctx, deleteAllUserDevices, userID)
	var deleted_count int32
	err := row.Scan(&deleted_count)
	return deleted_count, err
}

const getUserDeviceID = `-- name: GetUserDeviceID :one
SELECT id
FROM user_devices
WHERE user_id = $1
  AND user_agent = $2
  AND detached = FALSE
`

type GetUserDeviceIDParams struct {
	UserID    string `db:"user_id"`
	UserAgent string `db:"user_agent"`
}

func (q *Queries) GetUserDeviceID(ctx context.Context, arg GetUserDeviceIDParams) (string, error) {
	row := q.db.QueryRow(ctx, getUserDeviceID, arg.UserID, arg.UserAgent)
	var id string
	err := row.Scan(&id)
	return id, err
}

const registerDevice = `-- name: RegisterDevice :exec
INSERT INTO user_devices (id, user_id, user_agent, ip, detached, last_visited_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type RegisterDeviceParams struct {
	ID            string    `db:"id"`
	UserID        string    `db:"user_id"`
	UserAgent     string    `db:"user_agent"`
	Ip            string    `db:"ip"`
	Detached      bool      `db:"detached"`
	LastVisitedAt time.Time `db:"last_visited_at"`
}

func (q *Queries) RegisterDevice(ctx context.Context, arg RegisterDeviceParams) error {
	_, err := q.db.Exec(ctx, registerDevice,
		arg.ID,
		arg.UserID,
		arg.UserAgent,
		arg.Ip,
		arg.Detached,
		arg.LastVisitedAt,
	)
	return err
}

const updateLastVisitedAt = `-- name: UpdateLastVisitedAt :exec
UPDATE user_devices
SET last_visited_at = $1
WHERE id = $2
`

type UpdateLastVisitedAtParams struct {
	LastVisitedAt time.Time `db:"last_visited_at"`
	ID            string    `db:"id"`
}

func (q *Queries) UpdateLastVisitedAt(ctx context.Context, arg UpdateLastVisitedAtParams) error {
	_, err := q.db.Exec(ctx, updateLastVisitedAt, arg.LastVisitedAt, arg.ID)
	return err
}
