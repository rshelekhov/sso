// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: auth.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkAppIDExists = `-- name: CheckAppIDExists :one
SELECT EXISTS(SELECT 1 FROM apps WHERE id = $1)
`

func (q *Queries) CheckAppIDExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, checkAppIDExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens (token, user_id, app_id, endpoint, recipient, token_type_id,  created_at, expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateTokenParams struct {
	Token       string    `db:"token"`
	UserID      string    `db:"user_id"`
	AppID       string    `db:"app_id"`
	Endpoint    string    `db:"endpoint"`
	Recipient   string    `db:"recipient"`
	TokenTypeID int32     `db:"token_type_id"`
	CreatedAt   time.Time `db:"created_at"`
	ExpiresAt   time.Time `db:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.Exec(ctx, createToken,
		arg.Token,
		arg.UserID,
		arg.AppID,
		arg.Endpoint,
		arg.Recipient,
		arg.TokenTypeID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const deleteAllTokens = `-- name: DeleteAllTokens :exec
DELETE FROM tokens
WHERE user_id = $1
  AND app_id = $2
`

type DeleteAllTokensParams struct {
	UserID string `db:"user_id"`
	AppID  string `db:"app_id"`
}

func (q *Queries) DeleteAllTokens(ctx context.Context, arg DeleteAllTokensParams) error {
	_, err := q.db.Exec(ctx, deleteAllTokens, arg.UserID, arg.AppID)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE token = $1
`

func (q *Queries) DeleteToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteToken, token)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = $1
WHERE id = $2
  AND app_id = $3
  AND deleted_at IS NULL
`

type DeleteUserParams struct {
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
	ID        string             `db:"id"`
	AppID     string             `db:"app_id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.DeletedAt, arg.ID, arg.AppID)
	return err
}

const getTokenData = `-- name: GetTokenData :one
SELECT token, user_id, app_id, endpoint, token_type_id, recipient, expires_at
FROM tokens
WHERE token = $1
`

type GetTokenDataRow struct {
	Token       string    `db:"token"`
	UserID      string    `db:"user_id"`
	AppID       string    `db:"app_id"`
	Endpoint    string    `db:"endpoint"`
	TokenTypeID int32     `db:"token_type_id"`
	Recipient   string    `db:"recipient"`
	ExpiresAt   time.Time `db:"expires_at"`
}

func (q *Queries) GetTokenData(ctx context.Context, token string) (GetTokenDataRow, error) {
	row := q.db.QueryRow(ctx, getTokenData, token)
	var i GetTokenDataRow
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.AppID,
		&i.Endpoint,
		&i.TokenTypeID,
		&i.Recipient,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, app_id, updated_at
FROM users
WHERE email = $1
  AND app_id = $2
  AND deleted_at IS NULL
`

type GetUserByEmailParams struct {
	Email string `db:"email"`
	AppID string `db:"app_id"`
}

type GetUserByEmailRow struct {
	ID        string    `db:"id"`
	Email     string    `db:"email"`
	AppID     string    `db:"app_id"`
	UpdatedAt time.Time `db:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Email, arg.AppID)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AppID,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, app_id, verified, updated_at
FROM users
WHERE id = $1
  AND app_id = $2
  AND deleted_at IS NULL
`

type GetUserByIDParams struct {
	ID    string `db:"id"`
	AppID string `db:"app_id"`
}

type GetUserByIDRow struct {
	ID        string      `db:"id"`
	Email     string      `db:"email"`
	AppID     string      `db:"app_id"`
	Verified  pgtype.Bool `db:"verified"`
	UpdatedAt time.Time   `db:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, arg GetUserByIDParams) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, arg.ID, arg.AppID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AppID,
		&i.Verified,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserData = `-- name: GetUserData :one
SELECT id, email, password_hash, app_id, updated_at
FROM users
WHERE id = $1
  AND app_id = $2
  AND deleted_at IS NULL
`

type GetUserDataParams struct {
	ID    string `db:"id"`
	AppID string `db:"app_id"`
}

type GetUserDataRow struct {
	ID           string    `db:"id"`
	Email        string    `db:"email"`
	PasswordHash string    `db:"password_hash"`
	AppID        string    `db:"app_id"`
	UpdatedAt    time.Time `db:"updated_at"`
}

func (q *Queries) GetUserData(ctx context.Context, arg GetUserDataParams) (GetUserDataRow, error) {
	row := q.db.QueryRow(ctx, getUserData, arg.ID, arg.AppID)
	var i GetUserDataRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AppID,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDByToken = `-- name: GetUserIDByToken :one
SELECT user_id
FROM tokens
WHERE token = $1
`

func (q *Queries) GetUserIDByToken(ctx context.Context, token string) (string, error) {
	row := q.db.QueryRow(ctx, getUserIDByToken, token)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserStatusByEmail = `-- name: GetUserStatusByEmail :one
SELECT CASE
WHEN EXISTS(
    SELECT 1
    FROM users
    WHERE users.email = $1
      AND deleted_at IS NULL
    ) THEN 'active'
    WHEN EXISTS(
    SELECT 1
    FROM users
    WHERE users.email = $1
      AND deleted_at IS NOT NULL
    ) THEN 'soft_deleted'
ELSE 'not_found' END AS status
`

func (q *Queries) GetUserStatusByEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRow(ctx, getUserStatusByEmail, email)
	var status string
	err := row.Scan(&status)
	return status, err
}

const getUserStatusByID = `-- name: GetUserStatusByID :one
SELECT CASE
WHEN EXISTS(
    SELECT 1
    FROM users
    WHERE users.id = $1
        AND deleted_at IS NULL
        ) THEN 'active'
    WHEN EXISTS(
    SELECT 1
    FROM users
    WHERE users.id = $1
        AND deleted_at IS NOT NULL
    ) THEN 'soft_deleted'
ELSE 'not_found' END AS status
`

func (q *Queries) GetUserStatusByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, getUserStatusByID, id)
	var status string
	err := row.Scan(&status)
	return status, err
}

const markEmailVerified = `-- name: MarkEmailVerified :exec
UPDATE users
SET verified = TRUE
WHERE id = $1
  AND app_id = $2
  AND deleted_at IS NULL
`

type MarkEmailVerifiedParams struct {
	ID    string `db:"id"`
	AppID string `db:"app_id"`
}

func (q *Queries) MarkEmailVerified(ctx context.Context, arg MarkEmailVerifiedParams) error {
	_, err := q.db.Exec(ctx, markEmailVerified, arg.ID, arg.AppID)
	return err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (id, email, password_hash, app_id, verified, created_at,updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type RegisterUserParams struct {
	ID           string      `db:"id"`
	Email        string      `db:"email"`
	PasswordHash string      `db:"password_hash"`
	AppID        string      `db:"app_id"`
	Verified     pgtype.Bool `db:"verified"`
	CreatedAt    time.Time   `db:"created_at"`
	UpdatedAt    time.Time   `db:"updated_at"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.Exec(ctx, registerUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.AppID,
		arg.Verified,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
