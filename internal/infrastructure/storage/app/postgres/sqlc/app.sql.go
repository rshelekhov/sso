// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: app.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkAppIDExists = `-- name: CheckAppIDExists :one
SELECT EXISTS(SELECT 1 FROM apps WHERE id = $1)
`

func (q *Queries) CheckAppIDExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, checkAppIDExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteApp = `-- name: DeleteApp :exec
UPDATE apps
SET deleted_at = $1
WHERE id = $2
  AND secret = $3
    AND deleted_at IS NULL
`

type DeleteAppParams struct {
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
	ID        string             `db:"id"`
	Secret    string             `db:"secret"`
}

func (q *Queries) DeleteApp(ctx context.Context, arg DeleteAppParams) error {
	_, err := q.db.Exec(ctx, deleteApp, arg.DeletedAt, arg.ID, arg.Secret)
	return err
}

const insertApp = `-- name: InsertApp :exec
INSERT INTO apps (id, name, secret, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertAppParams struct {
	ID        string    `db:"id"`
	Name      string    `db:"name"`
	Secret    string    `db:"secret"`
	Status    int32     `db:"status"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

func (q *Queries) InsertApp(ctx context.Context, arg InsertAppParams) error {
	_, err := q.db.Exec(ctx, insertApp,
		arg.ID,
		arg.Name,
		arg.Secret,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
