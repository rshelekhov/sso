// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const createUserSession = `-- name: CreateSession :exec
INSERT INTO refresh_sessions (user_id, app_id, device_id, refresh_token, last_visited_at, expires_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateUserSessionParams struct {
	UserID        string    `db:"user_id"`
	AppID         string    `db:"app_id"`
	DeviceID      string    `db:"device_id"`
	RefreshToken  string    `db:"refresh_token"`
	LastVisitedAt time.Time `db:"last_visited_at"`
	ExpiresAt     time.Time `db:"expires_at"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) error {
	_, err := q.db.Exec(ctx, createUserSession,
		arg.UserID,
		arg.AppID,
		arg.DeviceID,
		arg.RefreshToken,
		arg.LastVisitedAt,
		arg.ExpiresAt,
	)
	return err
}

const deleteAllSessions = `-- name: DeleteAllSessions :exec
DELETE FROM refresh_sessions
WHERE user_id = $1
  AND app_id = $2
`

type DeleteAllSessionsParams struct {
	UserID string `db:"user_id"`
	AppID  string `db:"app_id"`
}

func (q *Queries) DeleteAllSessions(ctx context.Context, arg DeleteAllSessionsParams) error {
	_, err := q.db.Exec(ctx, deleteAllSessions, arg.UserID, arg.AppID)
	return err
}

const deleteRefreshTokenFromSession = `-- name: DeleteRefreshTokenFromSession :exec
DELETE FROM refresh_sessions
WHERE refresh_token = $1
`

func (q *Queries) DeleteRefreshTokenFromSession(ctx context.Context, refreshToken string) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenFromSession, refreshToken)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM refresh_sessions
WHERE user_id = $1
  AND app_id = $2
  AND device_id = $3
`

type DeleteSessionParams struct {
	UserID   string `db:"user_id"`
	AppID    string `db:"app_id"`
	DeviceID string `db:"device_id"`
}

func (q *Queries) DeleteSession(ctx context.Context, arg DeleteSessionParams) error {
	_, err := q.db.Exec(ctx, deleteSession, arg.UserID, arg.AppID, arg.DeviceID)
	return err
}

const getSessionByRefreshToken = `-- name: GetSessionByRefreshToken :one
SELECT user_id, app_id, device_id, last_visited_at, expires_at
FROM refresh_sessions
WHERE refresh_token = $1
`

type GetSessionByRefreshTokenRow struct {
	UserID        string    `db:"user_id"`
	AppID         string    `db:"app_id"`
	DeviceID      string    `db:"device_id"`
	LastVisitedAt time.Time `db:"last_visited_at"`
	ExpiresAt     time.Time `db:"expires_at"`
}

func (q *Queries) GetSessionByRefreshToken(ctx context.Context, refreshToken string) (GetSessionByRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, getSessionByRefreshToken, refreshToken)
	var i GetSessionByRefreshTokenRow
	err := row.Scan(
		&i.UserID,
		&i.AppID,
		&i.DeviceID,
		&i.LastVisitedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserDeviceID = `-- name: GetUserDeviceID :one
SELECT id
FROM user_devices
WHERE user_id = $1
  AND user_agent = $2
  AND detached = FALSE
`

type GetUserDeviceIDParams struct {
	UserID    string `db:"user_id"`
	UserAgent string `db:"user_agent"`
}

func (q *Queries) GetUserDeviceID(ctx context.Context, arg GetUserDeviceIDParams) (string, error) {
	row := q.db.QueryRow(ctx, getUserDeviceID, arg.UserID, arg.UserAgent)
	var id string
	err := row.Scan(&id)
	return id, err
}

const registerDevice = `-- name: RegisterDevice :exec
INSERT INTO user_devices (id, user_id, app_id, user_agent, ip, detached, last_visited_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type RegisterDeviceParams struct {
	ID            string    `db:"id"`
	UserID        string    `db:"user_id"`
	AppID         string    `db:"app_id"`
	UserAgent     string    `db:"user_agent"`
	Ip            string    `db:"ip"`
	Detached      bool      `db:"detached"`
	LastVisitedAt time.Time `db:"last_visited_at"`
}

func (q *Queries) RegisterDevice(ctx context.Context, arg RegisterDeviceParams) error {
	_, err := q.db.Exec(ctx, registerDevice,
		arg.ID,
		arg.UserID,
		arg.AppID,
		arg.UserAgent,
		arg.Ip,
		arg.Detached,
		arg.LastVisitedAt,
	)
	return err
}

const updateLastVisitedAt = `-- name: UpdateLastVisitedAt :exec
UPDATE user_devices
SET last_visited_at = $1
WHERE id = $2
  AND app_id = $3
`

type UpdateLastVisitedAtParams struct {
	LastVisitedAt time.Time `db:"last_visited_at"`
	ID            string    `db:"id"`
	AppID         string    `db:"app_id"`
}

func (q *Queries) UpdateLastVisitedAt(ctx context.Context, arg UpdateLastVisitedAtParams) error {
	_, err := q.db.Exec(ctx, updateLastVisitedAt, arg.LastVisitedAt, arg.ID, arg.AppID)
	return err
}
