---
description: Commit message format rules following conventional commits and the 50/72 rule
---

# Commit Message Format Rules

When creating commit messages, follow these strict formatting guidelines:

## Structure

```
<type>: <subject>

<body>

<footer>
```

## Subject Line (First Line)

- **Length**: Maximum 50 characters
- **Format**: `<type>: <subject>`
- **Capitalization**: First letter of subject must be capitalized
- **Mood**: Use imperative mood (e.g., "Add feature" not "Added feature" or "Adds feature")
- **Punctuation**: No period at the end
- **Types**: Must be one of:
  - `feat` - New feature
  - `fix` - Bug fix
  - `refactor` - Code refactoring (no functional changes)
  - `perf` - Performance improvements
  - `test` - Adding or updating tests
  - `docs` - Documentation changes
  - `chore` - Maintenance tasks (dependencies, configs, etc.)
  - `style` - Code style changes (formatting, missing semicolons, etc.)

## Body (Optional but Recommended)

- **Line Length**: Maximum 72 characters per line
- **Content**: Explain **what** and **why**, not **how**
- **Separation**: Leave one blank line between subject and body
- **Format**: Use multiple paragraphs if needed, separated by blank lines

## Footer (Optional)

- **Issue References**: Include when relevant
  - Example: `Fixes #123`
  - Example: `Closes #456`
  - Example: `Relates to #789`
- **Breaking Changes**: Use `BREAKING CHANGE:` prefix for breaking changes

## Examples

### Simple commit (no body needed)

```
feat: Add user authentication endpoint
```

### Commit with body

```
fix: Prevent race condition in session cleanup

The session cleanup goroutine could access sessions while they were
being modified by the main handler. Added proper mutex locks to
ensure thread-safe access to the session map.

Fixes #234
```

### Feature with detailed explanation

```
feat: Implement JWT token refresh mechanism

Added automatic token refresh for expired JWTs. The system now
checks token expiration before each request and refreshes it
transparently if needed. This improves user experience by
reducing unexpected authentication failures.

The refresh token is stored securely in Redis with a 7-day
expiration window. Users must re-authenticate after this period.

Relates to #456
```

### Refactoring example

```
refactor: Extract validation logic into separate package

Moved all input validation functions from handlers to a dedicated
validator package. This improves code reusability and makes
testing easier.
```

### Breaking change example

```
feat: Change password hash algorithm to Argon2

Migrated from bcrypt to Argon2id for password hashing to improve
security against modern attack vectors.

BREAKING CHANGE: Existing password hashes will need to be
re-hashed on next user login. Migration script provided in
scripts/migrate-passwords.sh
```

## Common Mistakes to Avoid

- ❌ `Added new feature` (not imperative mood)
- ❌ `fix: bug fix` (not descriptive enough)
- ❌ `Update code.` (has period, not specific)
- ❌ `feat: add new authentication endpoint for users to login to the system` (over 50 chars)
- ❌ `fixed login bug` (no type prefix, not capitalized)

## Correct Examples

- ✅ `feat: Add OAuth2 authentication support`
- ✅ `fix: Resolve nil pointer in session handler`
- ✅ `refactor: Simplify token validation logic`
- ✅ `perf: Optimize database query for user lookup`
- ✅ `test: Add integration tests for login flow`
- ✅ `docs: Update API documentation for auth endpoints`
- ✅ `chore: Update dependencies to latest versions`
- ✅ `style: Format code according to gofmt standards`
