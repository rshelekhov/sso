# Promtail Configuration for SSO Application
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker container logs with service discovery
  - job_name: docker-services
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging=promtail"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_label_service"]
        target_label: "service"
      - source_labels: ["__meta_docker_container_name"]
        target_label: "container"
      - source_labels: ["__meta_docker_container_log_stream"]
        target_label: "stream"
    pipeline_stages:
      - docker: {}
      - static_labels:
          source: docker

  # Docker container logs - main configuration for collecting container logs
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*-json.log

    # Parse Docker JSON logs
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
            attrs: attrs
      - json:
          expressions:
            service: attrs.service
            logging: attrs.logging
          source: attrs
      - regex:
          expression: ^/var/lib/docker/containers/(?P<container_id>[a-z0-9]{64})/.*\.log$
          source: __path__
      - timestamp:
          format: RFC3339Nano
          source: time
      - labels:
          stream:
          container_id:
          service:
      - match:
          selector: '{service="sso"}'
          stages:
            - regex:
                expression: "(?P<level>INFO|WARN|ERROR|DEBUG)"
                source: output
            - labels:
                level:
      - match:
          selector: '{service="postgres"}'
          stages:
            - regex:
                expression: "(?P<level>LOG|ERROR|WARNING|NOTICE)"
                source: output
            - labels:
                level:
      - match:
          selector: '{service="redis"}'
          stages:
            - regex:
                expression: "(?P<level>INFO|WARNING|ERROR)"
                source: output
            - labels:
                level:
      - output:
          source: output

  # System logs
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*log

  # SSO application logs (if application writes to files)
  - job_name: sso-app-files
    static_configs:
      - targets:
          - localhost
        labels:
          job: sso-app-files
          service: sso-files
          __path__: /var/log/sso/*log
    pipeline_stages:
      - regex:
          expression: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d+Z)\s+(?P<level>\w+)\s+(?P<message>.*)'
      - timestamp:
          format: RFC3339Nano
          source: timestamp
      - labels:
          level:
      - output:
          source: message

  # Nginx logs (if applicable)
  # - job_name: nginx
  #   static_configs:
  #     - targets:
  #         - localhost
  #       labels:
  #         job: nginx
  #         __path__: /var/log/nginx/*log
