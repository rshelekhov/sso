name: Deploy on DEV

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number in "v1.2.3" format'
        required: true

env:
  DEV_SERVER_USER: ${{ secrets.DEV_SERVER_USER }}
  DEV_SERVER_HOST: ${{ secrets.DEV_SERVER_HOST }}
  DEV_SERVER_SSH_KEY: ${{ secrets.DEV_SERVER_SSH_KEY }}

jobs:
  deploy:
    name: Deploy on DEV server
    runs-on: ubuntu-latest

    steps:
      - name: Check out code from dev branch
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Build Docker image
        run: |
          docker build -t sso:latest .

      - name: Create a temporary SSH key file
        run: |
          echo "$DEV_SERVER_SSH_KEY" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: Add DEV server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $DEV_SERVER_HOST >> ~/.ssh/known_hosts

      - name: Upload Docker image to DEV server
        run: |
          # Save Docker image to a tar file 
          docker save sso:latest -o sso.tar
          
          # Transfer Docker image tar file to DEV server
          scp -i /tmp/ssh_key sso.tar $DEV_SERVER_USER@$DEV_SERVER_HOST:/tmp/

      - name: Deploy Docker image to DEV server
        run: |
          ssh -i /tmp/ssh_key $DEV_SERVER_USER@$DEV_SERVER_HOST << 'EOF'
            # Create config file on the server
            mkdir -p ./config/sso
            echo "${{ secrets.ENV_CONFIG_DEV }}" > ./config/sso/.env
          
            # Stop and remove the existing container (if any)
            docker stop sso-app || true
            docker rm sso-app || true
          
            # Load the Docker image
            docker load -i /tmp/sso.tar
          
            # Run the new container with the CONFIG_PATH environment variable for running the app
            # and POSTGRESQL_URL environment variable set for running migrations
            docker run -d \
              -v ${PWD}/config/sso:/src/config \
              -e CONFIG_PATH=/src/config/.env \
              -e POSTGRESQL_URL=${{ secrets.POSTGRESQL_URL }} \
              -p 44044:44044 \
              -p 8081:8081 \
              --name sso-app \
              sso:latest
          
            # Wait for a few seconds to ensure the container is running
            sleep 10

            # Check if the container is running
            if [ "$(docker ps -q -f name=sso-app)" ]; then
              echo "Container is running. Executing setup-dev command."
              docker exec sso-app sh -c "make setup-dev" || { echo "Failed to execute setup-dev command"; exit 1; }
            else
              echo "Container is not running. Checking logs..."
              docker logs sso-app
              echo "Exiting."
              exit 1
            fi
          EOF

      - name: Clean up
        run: |
          # Remove temporary files
          rm /tmp/ssh_key
          rm sso.tar