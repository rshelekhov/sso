name: Deploy on PROD from Docker Hub

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true

env:
  PROD_SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
  PROD_SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
  PROD_SERVER_SSH_KEY: ${{ secrets.PROD_SERVER_SSH_KEY }}
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_RS_USER }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_RS_PASSWORD }}
  ENV_CONFIG_PROD: ${{ secrets.ENV_CONFIG_PROD }}
  REGISTRY_IMAGE: rshelekhov/grpc-sso

jobs:
  deploy:
    name: Deploy to PROD server
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo into the Go module directory
        uses: actions/checkout@v3

      - name: Deploy Docker image to PROD server
        run: |
          # Create a temporary SSH key file
          echo "$PROD_SERVER_SSH_KEY" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          ssh -i /tmp/ssh_key $PROD_SERVER_USER@PROD_SERVER_HOST << 'EOF'
            # Create config file on the server
            echo "$ENV_CONFIG_PROD" > ./config/grpc-sso/.env
          
             # Login to Docker Hub
            echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
          
            # Pull the latest Docker image
            docker pull $REGISTRY_IMAGE:latest
          
            # Stop and remove the existing container (if any)
            docker stop sso-app || true
            docker rm sso-app || true
          
            # Run the new container with the CONFIG_PATH environment variable for running the app
            # and POSTGRESQL_URL environment variable set for running migrations
            docker run -d \
              -v ${PWD}/config/grpc-sso:/src/config \
              -e CONFIG_PATH=/src/config/.env \
              -e POSTGRESQL_URL=${{ secrets.POSTGRESQL_URL }} \
              -p 44044:44044 \
              --name sso-app \
              grpc-sso:latest
          
            # Check if the container is running
            if [ "$(docker ps -q -f name=sso-app)" ]; then
              echo "Container is running. Executing setup command."
              docker exec sso-app sh -c "make setup" || { echo "Failed to execute setup command"; exit 1; }
            else
              echo "Container is not running. Checking logs..."
              docker logs sso-app
              echo "Exiting."
              exit 1
            fi
          EOF
          
          # Clean up the temporary SSH key file
          rm /tmp/ssh_key